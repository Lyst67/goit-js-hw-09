{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAEhCC,EAAQ,KACRC,EAAO,KACPC,EAAS,KAkCb,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUS,MAAAR,IACpBS,QAAQC,IAAI,CAAEX,WAAUS,MAAAR,MAExBG,EAAO,CAAEJ,WAAUS,MAAAR,IACnBS,QAAQC,IAAI,CAAEX,WAAUS,MAAAR,I,GAEzBA,E,IA3CPR,EAAKmB,iBAAiB,UAiBtB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAK,IAAIC,EAAI,EAAGA,GAAKjB,EAAQiB,GAAK,EAChChB,EAAcgB,EAAGnB,GACdoB,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUkB,EAAKD,EAALR,MACjBlB,EAAA4B,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANH,EAAM,M,IAE9DI,OAAM,SAAAL,G,IAAGjB,EAAQiB,EAARjB,SAAUuB,EAAKN,EAALR,MAClBlB,EAAA4B,OAAOK,QAAQ,sBAAqCH,OAAfrB,EAAS,QAAYqB,OAANE,EAAM,M,IAE9D3B,GAAgBC,EAElBD,EAAQ6B,OAAOhC,EAAKiC,SAASjB,MAAMkB,M,IA5BrClC,EAAKiC,SAASjB,MAAMG,iBAAiB,SAYrC,SAAsBC,GACpBjB,EAAQ6B,OAAOZ,EAAIe,OAAOD,M,IAZ5BlC,EAAKiC,SAASG,KAAKjB,iBAAiB,SAOpC,SAAqBC,GACnBhB,EAAO4B,OAAOZ,EAAIe,OAAOD,M,IAP3BlC,EAAKiC,SAASI,OAAOlB,iBAAiB,SAEtC,SAAkBC,GAChBf,EAASe,EAAIe,OAAOD,K","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nlet delay = null;\nlet step = null;\nlet amount = null;\n\nform.addEventListener('submit', onSubmitForm);\nform.elements.delay.addEventListener('input', onFirstDelay);\nform.elements.step.addEventListener('input', onDelayStep);\nform.elements.amount.addEventListener('input', onAmount);\n\nfunction onAmount(evt) {\n  amount = evt.target.value;\n}\n\nfunction onDelayStep(evt) {\n  step = Number(evt.target.value);\n}\n\nfunction onFirstDelay(evt) {\n  delay = Number(evt.target.value);\n}\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay = delay + step;\n  }\n  delay = Number(form.elements.delay.value);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        console.log({ position, delay });\n      } else {\n        reject({ position, delay });\n        console.log({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","console","log","addEventListener","evt","preventDefault","i","then","param","delay1","Notify","success","concat","catch","delay2","failure","Number","elements","value","target","step","amount"],"version":3,"file":"03-promises.b4d9db91.js.map"}