{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAEpC,IAAIC,EAAQ,KACRC,EAAO,KACPC,EAAS,KAkCb,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,EAAUS,MAAAR,IACpBS,QAAQC,IAAI,C,SAAEX,EAAUS,MAAAR,MAExBG,EAAO,C,SAAEJ,EAAUS,MAAAR,IACnBS,QAAQC,IAAI,C,SAAEX,EAAUS,MAAAR,I,GAEzBA,EAAM,G,CA3CbR,EAAKmB,iBAAiB,UAiBtB,SAAsBC,GACpBA,EAAIC,iBACJ,IAAK,IAAIC,EAAI,EAAGA,GAAKjB,EAAQiB,GAAK,EAChChB,EAAcgB,EAAGnB,GACdoB,MAAK,EAAChB,SAAEA,EAAUS,MAAAQ,MACjB1B,EAAA2B,OAAOC,QAAQ,uBAAqBnB,QAAiBiB,MAAU,IAEhEG,OAAM,EAACpB,SAAEA,EAAUS,MAAAY,MAClB9B,EAAA2B,OAAOI,QAAQ,sBAAoBtB,QAAeqB,MAAU,IAEhEzB,GAAgBC,EAElBD,EAAQ2B,OAAO9B,EAAK+B,SAASf,MAAMgB,M,IA5BrChC,EAAK+B,SAASf,MAAMG,iBAAiB,SAYrC,SAAsBC,GACpBjB,EAAQ2B,OAAOV,EAAIa,OAAOD,M,IAZ5BhC,EAAK+B,SAASG,KAAKf,iBAAiB,SAOpC,SAAqBC,GACnBhB,EAAO0B,OAAOV,EAAIa,OAAOD,M,IAP3BhC,EAAK+B,SAASI,OAAOhB,iBAAiB,SAEtC,SAAkBC,GAChBf,EAASe,EAAIa,OAAOD,K","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nlet delay = null;\nlet step = null;\nlet amount = null;\n\nform.addEventListener('submit', onSubmitForm);\nform.elements.delay.addEventListener('input', onFirstDelay);\nform.elements.step.addEventListener('input', onDelayStep);\nform.elements.amount.addEventListener('input', onAmount);\n\nfunction onAmount(evt) {\n  amount = evt.target.value;\n}\n\nfunction onDelayStep(evt) {\n  step = Number(evt.target.value);\n}\n\nfunction onFirstDelay(evt) {\n  delay = Number(evt.target.value);\n}\n\nfunction onSubmitForm(evt) {\n  evt.preventDefault();\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay = delay + step;\n  }\n  delay = Number(form.elements.delay.value);\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        console.log({ position, delay });\n      } else {\n        reject({ position, delay });\n        console.log({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","console","log","addEventListener","evt","preventDefault","i","then","delay1","Notify","success","catch","delay2","failure","Number","elements","value","target","step","amount"],"version":3,"file":"03-promises.22b8e2be.js.map"}